// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errors.proto

package im_error_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrCode int32

const (
	ErrCode_success               ErrCode = 0
	ErrCode_common_unexpected_err ErrCode = 1
	// 数据库
	ErrCode_db_read_err  ErrCode = 2
	ErrCode_db_write_err ErrCode = 3
	// account服务
	ErrCode_account_user_name_repeat   ErrCode = 1001
	ErrCode_account_account_not_found  ErrCode = 1002
	ErrCode_account_password_incorrect ErrCode = 1003
)

var ErrCode_name = map[int32]string{
	0:    "success",
	1:    "common_unexpected_err",
	2:    "db_read_err",
	3:    "db_write_err",
	1001: "account_user_name_repeat",
	1002: "account_account_not_found",
	1003: "account_password_incorrect",
}

var ErrCode_value = map[string]int32{
	"success":                    0,
	"common_unexpected_err":      1,
	"db_read_err":                2,
	"db_write_err":               3,
	"account_user_name_repeat":   1001,
	"account_account_not_found":  1002,
	"account_password_incorrect": 1003,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24fe73c7f0ddb19c, []int{0}
}

// 返回客户端错误
type CommonError struct {
	Code ErrCode `protobuf:"varint,1,opt,name=Code,proto3,enum=im_error_proto.ErrCode" json:"Code,omitempty"`
	// 往返消息id
	ReqMsgID uint32 `protobuf:"varint,2,opt,name=ReqMsgID,proto3" json:"ReqMsgID,omitempty"`
	ResMsgID uint32 `protobuf:"varint,3,opt,name=ResMsgID,proto3" json:"ResMsgID,omitempty"`
	// 往返消息数据
	ReqPayload string `protobuf:"bytes,4,opt,name=ReqPayload,proto3" json:"ReqPayload,omitempty"`
	ResPayload string `protobuf:"bytes,5,opt,name=ResPayload,proto3" json:"ResPayload,omitempty"`
}

func (m *CommonError) Reset()         { *m = CommonError{} }
func (m *CommonError) String() string { return proto.CompactTextString(m) }
func (*CommonError) ProtoMessage()    {}
func (*CommonError) Descriptor() ([]byte, []int) {
	return fileDescriptor_24fe73c7f0ddb19c, []int{0}
}
func (m *CommonError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonError.Merge(m, src)
}
func (m *CommonError) XXX_Size() int {
	return m.Size()
}
func (m *CommonError) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonError.DiscardUnknown(m)
}

var xxx_messageInfo_CommonError proto.InternalMessageInfo

func (m *CommonError) GetCode() ErrCode {
	if m != nil {
		return m.Code
	}
	return ErrCode_success
}

func (m *CommonError) GetReqMsgID() uint32 {
	if m != nil {
		return m.ReqMsgID
	}
	return 0
}

func (m *CommonError) GetResMsgID() uint32 {
	if m != nil {
		return m.ResMsgID
	}
	return 0
}

func (m *CommonError) GetReqPayload() string {
	if m != nil {
		return m.ReqPayload
	}
	return ""
}

func (m *CommonError) GetResPayload() string {
	if m != nil {
		return m.ResPayload
	}
	return ""
}

func init() {
	proto.RegisterEnum("im_error_proto.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*CommonError)(nil), "im_error_proto.CommonError")
}

func init() { proto.RegisterFile("errors.proto", fileDescriptor_24fe73c7f0ddb19c) }

var fileDescriptor_24fe73c7f0ddb19c = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x86, 0xb5, 0xb6, 0x5b, 0xb5, 0x6b, 0xd7, 0x15, 0x0b, 0xa5, 0xb2, 0xa1, 0x5b, 0xd3, 0x93,
	0x69, 0xb1, 0x04, 0xcd, 0x1b, 0xc4, 0xf1, 0xc1, 0x07, 0x43, 0x50, 0x6e, 0x81, 0xb0, 0x48, 0xab,
	0x89, 0x23, 0x88, 0xb4, 0xf2, 0xec, 0x2a, 0x4e, 0xde, 0x22, 0xcf, 0x12, 0xf2, 0x10, 0x39, 0xfa,
	0x98, 0x63, 0xb0, 0x4f, 0x49, 0x5e, 0x22, 0x58, 0xb2, 0x42, 0x7c, 0xfa, 0xf9, 0xbf, 0x6f, 0x0e,
	0x33, 0x0c, 0xed, 0x00, 0xa2, 0x42, 0xed, 0xe5, 0xa8, 0x8c, 0x62, 0xdd, 0x24, 0x15, 0x25, 0x10,
	0x65, 0xff, 0x73, 0x47, 0x68, 0x7b, 0xac, 0xd2, 0x54, 0x65, 0x93, 0x2d, 0x65, 0xff, 0x68, 0x6b,
	0xac, 0x62, 0x70, 0xc9, 0x80, 0x0c, 0xbb, 0xff, 0x7f, 0x7a, 0xfb, 0xe3, 0xde, 0x04, 0x71, 0xab,
	0x83, 0x72, 0x88, 0xf5, 0xe9, 0x97, 0x00, 0x16, 0x33, 0x3d, 0x9f, 0x1e, 0xb9, 0x8d, 0x01, 0x19,
	0x7e, 0x0b, 0xde, 0x7b, 0xe5, 0x74, 0xe5, 0x9a, 0xb5, 0xab, 0x3a, 0xe3, 0x94, 0x06, 0xb0, 0x38,
	0x0e, 0x6f, 0x2e, 0x55, 0x18, 0xbb, 0xad, 0x01, 0x19, 0x7e, 0x0d, 0x3e, 0x90, 0xca, 0xeb, 0xda,
	0x7f, 0xaa, 0x7d, 0x4d, 0xfe, 0xde, 0x13, 0x6a, 0xef, 0x36, 0x61, 0x6d, 0x6a, 0xeb, 0x42, 0x4a,
	0xd0, 0xda, 0xb1, 0x58, 0x8f, 0xfe, 0x90, 0xe5, 0x31, 0xa2, 0xc8, 0xe0, 0x3a, 0x07, 0x69, 0x20,
	0xde, 0xee, 0xef, 0x10, 0xf6, 0x9d, 0xb6, 0xe3, 0x48, 0x20, 0x84, 0x15, 0x68, 0x30, 0x87, 0x76,
	0xe2, 0x48, 0x2c, 0x31, 0x31, 0x50, 0x92, 0x26, 0xfb, 0x45, 0xdd, 0x50, 0x4a, 0x55, 0x64, 0x46,
	0x14, 0x1a, 0x50, 0x64, 0x61, 0x0a, 0x02, 0x21, 0x87, 0xd0, 0x38, 0xcf, 0x36, 0xe3, 0xb4, 0x57,
	0xeb, 0x3a, 0x33, 0x65, 0xc4, 0xb9, 0x2a, 0xb2, 0xd8, 0x79, 0xb1, 0xd9, 0x6f, 0xda, 0xaf, 0x79,
	0x1e, 0x6a, 0xbd, 0x54, 0x18, 0x8b, 0x24, 0x93, 0x0a, 0x11, 0xa4, 0x71, 0x5e, 0xed, 0xc3, 0xb3,
	0x87, 0x35, 0x27, 0xab, 0x35, 0x27, 0x4f, 0x6b, 0x4e, 0x6e, 0x37, 0xdc, 0x5a, 0x6d, 0xb8, 0xf5,
	0xb8, 0xe1, 0xd6, 0xe9, 0x78, 0x9e, 0x98, 0x8b, 0x22, 0xf2, 0xa4, 0x4a, 0xfd, 0x34, 0x49, 0x13,
	0x3d, 0xd2, 0xfe, 0x74, 0x36, 0x3a, 0x01, 0xbc, 0x4a, 0x24, 0xf8, 0x1a, 0xa5, 0x5f, 0xdd, 0xb5,
	0x8b, 0xf2, 0x19, 0xfe, 0xfe, 0x6f, 0xa2, 0xcf, 0x65, 0x1c, 0xbc, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x1d, 0x41, 0x48, 0x07, 0xf1, 0x01, 0x00, 0x00,
}

func (m *CommonError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResPayload) > 0 {
		i -= len(m.ResPayload)
		copy(dAtA[i:], m.ResPayload)
		i = encodeVarintErrors(dAtA, i, uint64(len(m.ResPayload)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReqPayload) > 0 {
		i -= len(m.ReqPayload)
		copy(dAtA[i:], m.ReqPayload)
		i = encodeVarintErrors(dAtA, i, uint64(len(m.ReqPayload)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResMsgID != 0 {
		i = encodeVarintErrors(dAtA, i, uint64(m.ResMsgID))
		i--
		dAtA[i] = 0x18
	}
	if m.ReqMsgID != 0 {
		i = encodeVarintErrors(dAtA, i, uint64(m.ReqMsgID))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintErrors(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintErrors(dAtA []byte, offset int, v uint64) int {
	offset -= sovErrors(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovErrors(uint64(m.Code))
	}
	if m.ReqMsgID != 0 {
		n += 1 + sovErrors(uint64(m.ReqMsgID))
	}
	if m.ResMsgID != 0 {
		n += 1 + sovErrors(uint64(m.ResMsgID))
	}
	l = len(m.ReqPayload)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	l = len(m.ResPayload)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	return n
}

func sovErrors(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErrors(x uint64) (n int) {
	return sovErrors(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMsgID", wireType)
			}
			m.ReqMsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMsgID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResMsgID", wireType)
			}
			m.ResMsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResMsgID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrors(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErrors
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErrors
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErrors
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErrors        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrors          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErrors = fmt.Errorf("proto: unexpected end of group")
)
