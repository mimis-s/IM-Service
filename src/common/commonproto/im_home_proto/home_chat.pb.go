// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: home_chat.proto

package im_home_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChatSingleReq struct {
	TestStr string `protobuf:"bytes,1,opt,name=TestStr,proto3" json:"TestStr,omitempty"`
}

func (m *ChatSingleReq) Reset()         { *m = ChatSingleReq{} }
func (m *ChatSingleReq) String() string { return proto.CompactTextString(m) }
func (*ChatSingleReq) ProtoMessage()    {}
func (*ChatSingleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_75856de7ef776b75, []int{0}
}
func (m *ChatSingleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatSingleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatSingleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatSingleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatSingleReq.Merge(m, src)
}
func (m *ChatSingleReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatSingleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatSingleReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatSingleReq proto.InternalMessageInfo

func (m *ChatSingleReq) GetTestStr() string {
	if m != nil {
		return m.TestStr
	}
	return ""
}

type ChatSingleRes struct {
	TestStr string `protobuf:"bytes,1,opt,name=TestStr,proto3" json:"TestStr,omitempty"`
}

func (m *ChatSingleRes) Reset()         { *m = ChatSingleRes{} }
func (m *ChatSingleRes) String() string { return proto.CompactTextString(m) }
func (*ChatSingleRes) ProtoMessage()    {}
func (*ChatSingleRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_75856de7ef776b75, []int{1}
}
func (m *ChatSingleRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatSingleRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatSingleRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatSingleRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatSingleRes.Merge(m, src)
}
func (m *ChatSingleRes) XXX_Size() int {
	return m.Size()
}
func (m *ChatSingleRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatSingleRes.DiscardUnknown(m)
}

var xxx_messageInfo_ChatSingleRes proto.InternalMessageInfo

func (m *ChatSingleRes) GetTestStr() string {
	if m != nil {
		return m.TestStr
	}
	return ""
}

func init() {
	proto.RegisterType((*ChatSingleReq)(nil), "im_home_proto.ChatSingleReq")
	proto.RegisterType((*ChatSingleRes)(nil), "im_home_proto.ChatSingleRes")
}

func init() { proto.RegisterFile("home_chat.proto", fileDescriptor_75856de7ef776b75) }

var fileDescriptor_75856de7ef776b75 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0xc8, 0xcf, 0x4d,
	0x8d, 0x4f, 0xce, 0x48, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcd, 0xcc, 0x8d,
	0x07, 0x8b, 0x81, 0xb9, 0x4a, 0x9a, 0x5c, 0xbc, 0xce, 0x19, 0x89, 0x25, 0xc1, 0x99, 0x79, 0xe9,
	0x39, 0xa9, 0x41, 0xa9, 0x85, 0x42, 0x12, 0x5c, 0xec, 0x21, 0xa9, 0xc5, 0x25, 0xc1, 0x25, 0x45,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0x2e, 0xba, 0xd2, 0x62, 0xdc, 0x4a, 0x9d, 0x62,
	0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x29, 0x3d, 0xb3, 0x24, 0xa3,
	0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x37, 0x33, 0x37, 0xb3, 0x58, 0xb7, 0x58, 0xdf, 0xd3,
	0x57, 0x37, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xbf, 0xb8, 0x28, 0x59, 0x3f, 0x39, 0x3f,
	0x37, 0x37, 0x3f, 0x0f, 0x4a, 0x81, 0x5d, 0xa9, 0x8f, 0xe2, 0xe6, 0x24, 0x36, 0x30, 0x65, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x76, 0x86, 0xa9, 0xdc, 0x00, 0x00, 0x00,
}

func (m *ChatSingleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatSingleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatSingleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestStr) > 0 {
		i -= len(m.TestStr)
		copy(dAtA[i:], m.TestStr)
		i = encodeVarintHomeChat(dAtA, i, uint64(len(m.TestStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatSingleRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatSingleRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatSingleRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestStr) > 0 {
		i -= len(m.TestStr)
		copy(dAtA[i:], m.TestStr)
		i = encodeVarintHomeChat(dAtA, i, uint64(len(m.TestStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHomeChat(dAtA []byte, offset int, v uint64) int {
	offset -= sovHomeChat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChatSingleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TestStr)
	if l > 0 {
		n += 1 + l + sovHomeChat(uint64(l))
	}
	return n
}

func (m *ChatSingleRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TestStr)
	if l > 0 {
		n += 1 + l + sovHomeChat(uint64(l))
	}
	return n
}

func sovHomeChat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHomeChat(x uint64) (n int) {
	return sovHomeChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatSingleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatSingleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatSingleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatSingleRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatSingleRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatSingleRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHomeChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHomeChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHomeChat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHomeChat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHomeChat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHomeChat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHomeChat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHomeChat = fmt.Errorf("proto: unexpected end of group")
)
