// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: home_chat.proto

package im_home_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 消息类型
type MessageFileType_Enum int32

const (
	MessageFileType_Enum_MessageFileType_Enum_Default MessageFileType_Enum = 0
	MessageFileType_Enum_EnumTextType                 MessageFileType_Enum = 1
	MessageFileType_Enum_EnumImgType                  MessageFileType_Enum = 2
	MessageFileType_Enum_EnumFileType                 MessageFileType_Enum = 3
)

var MessageFileType_Enum_name = map[int32]string{
	0: "MessageFileType_Enum_Default",
	1: "EnumTextType",
	2: "EnumImgType",
	3: "EnumFileType",
}

var MessageFileType_Enum_value = map[string]int32{
	"MessageFileType_Enum_Default": 0,
	"EnumTextType":                 1,
	"EnumImgType":                  2,
	"EnumFileType":                 3,
}

func (x MessageFileType_Enum) String() string {
	return proto.EnumName(MessageFileType_Enum_name, int32(x))
}

func (MessageFileType_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75856de7ef776b75, []int{0}
}

// 消息状态
type MessageStatus_Enum int32

const (
	MessageStatus_Enum_MessageStatus_Enum_Default MessageStatus_Enum = 0
	MessageStatus_Enum_EnumSend                   MessageStatus_Enum = 1
	MessageStatus_Enum_EnumArrive                 MessageStatus_Enum = 2
	MessageStatus_Enum_EnumRead                   MessageStatus_Enum = 3
)

var MessageStatus_Enum_name = map[int32]string{
	0: "MessageStatus_Enum_Default",
	1: "EnumSend",
	2: "EnumArrive",
	3: "EnumRead",
}

var MessageStatus_Enum_value = map[string]int32{
	"MessageStatus_Enum_Default": 0,
	"EnumSend":                   1,
	"EnumArrive":                 2,
	"EnumRead":                   3,
}

func (x MessageStatus_Enum) String() string {
	return proto.EnumName(MessageStatus_Enum_name, int32(x))
}

func (MessageStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75856de7ef776b75, []int{1}
}

// 消息概要(当消息为文件或者图片的时候才需要)
type MessageFileRecap struct {
	FileName        string               `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileExtension   string               `protobuf:"bytes,2,opt,name=FileExtension,proto3" json:"FileExtension,omitempty"`
	FileSize        int64                `protobuf:"varint,3,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	FileData        string               `protobuf:"bytes,4,opt,name=FileData,proto3" json:"FileData,omitempty"`
	FileIndex       int32                `protobuf:"varint,5,opt,name=FileIndex,proto3" json:"FileIndex,omitempty"`
	MessageFileType MessageFileType_Enum `protobuf:"varint,6,opt,name=MessageFileType,proto3,enum=im_home_proto.MessageFileType_Enum" json:"MessageFileType,omitempty"`
}

func (m *MessageFileRecap) Reset()         { *m = MessageFileRecap{} }
func (m *MessageFileRecap) String() string { return proto.CompactTextString(m) }
func (*MessageFileRecap) ProtoMessage()    {}
func (*MessageFileRecap) Descriptor() ([]byte, []int) {
	return fileDescriptor_75856de7ef776b75, []int{0}
}
func (m *MessageFileRecap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageFileRecap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageFileRecap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageFileRecap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageFileRecap.Merge(m, src)
}
func (m *MessageFileRecap) XXX_Size() int {
	return m.Size()
}
func (m *MessageFileRecap) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageFileRecap.DiscardUnknown(m)
}

var xxx_messageInfo_MessageFileRecap proto.InternalMessageInfo

func (m *MessageFileRecap) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *MessageFileRecap) GetFileExtension() string {
	if m != nil {
		return m.FileExtension
	}
	return ""
}

func (m *MessageFileRecap) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *MessageFileRecap) GetFileData() string {
	if m != nil {
		return m.FileData
	}
	return ""
}

func (m *MessageFileRecap) GetFileIndex() int32 {
	if m != nil {
		return m.FileIndex
	}
	return 0
}

func (m *MessageFileRecap) GetMessageFileType() MessageFileType_Enum {
	if m != nil {
		return m.MessageFileType
	}
	return MessageFileType_Enum_MessageFileType_Enum_Default
}

// 聊天消息
type ChatMessage struct {
	SenderID         int64               `protobuf:"varint,1,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	ReceiverID       int64               `protobuf:"varint,2,opt,name=ReceiverID,proto3" json:"ReceiverID,omitempty"`
	MessageID        int64               `protobuf:"varint,3,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	SendTimeStamp    int64               `protobuf:"varint,4,opt,name=SendTimeStamp,proto3" json:"SendTimeStamp,omitempty"`
	MessageStatus    MessageStatus_Enum  `protobuf:"varint,5,opt,name=MessageStatus,proto3,enum=im_home_proto.MessageStatus_Enum" json:"MessageStatus,omitempty"`
	MessageFileInfos []*MessageFileRecap `protobuf:"bytes,6,rep,name=MessageFileInfos,proto3" json:"MessageFileInfos,omitempty"`
	Data             string              `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_75856de7ef776b75, []int{1}
}
func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return m.Size()
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *ChatMessage) GetReceiverID() int64 {
	if m != nil {
		return m.ReceiverID
	}
	return 0
}

func (m *ChatMessage) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *ChatMessage) GetSendTimeStamp() int64 {
	if m != nil {
		return m.SendTimeStamp
	}
	return 0
}

func (m *ChatMessage) GetMessageStatus() MessageStatus_Enum {
	if m != nil {
		return m.MessageStatus
	}
	return MessageStatus_Enum_MessageStatus_Enum_Default
}

func (m *ChatMessage) GetMessageFileInfos() []*MessageFileRecap {
	if m != nil {
		return m.MessageFileInfos
	}
	return nil
}

func (m *ChatMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ChatSingleReq struct {
	Data *ChatMessage `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ChatSingleReq) Reset()         { *m = ChatSingleReq{} }
func (m *ChatSingleReq) String() string { return proto.CompactTextString(m) }
func (*ChatSingleReq) ProtoMessage()    {}
func (*ChatSingleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_75856de7ef776b75, []int{2}
}
func (m *ChatSingleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatSingleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatSingleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatSingleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatSingleReq.Merge(m, src)
}
func (m *ChatSingleReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatSingleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatSingleReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatSingleReq proto.InternalMessageInfo

func (m *ChatSingleReq) GetData() *ChatMessage {
	if m != nil {
		return m.Data
	}
	return nil
}

type ChatSingleRes struct {
	Data *ChatMessage `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ChatSingleRes) Reset()         { *m = ChatSingleRes{} }
func (m *ChatSingleRes) String() string { return proto.CompactTextString(m) }
func (*ChatSingleRes) ProtoMessage()    {}
func (*ChatSingleRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_75856de7ef776b75, []int{3}
}
func (m *ChatSingleRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatSingleRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatSingleRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatSingleRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatSingleRes.Merge(m, src)
}
func (m *ChatSingleRes) XXX_Size() int {
	return m.Size()
}
func (m *ChatSingleRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatSingleRes.DiscardUnknown(m)
}

var xxx_messageInfo_ChatSingleRes proto.InternalMessageInfo

func (m *ChatSingleRes) GetData() *ChatMessage {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("im_home_proto.MessageFileType_Enum", MessageFileType_Enum_name, MessageFileType_Enum_value)
	proto.RegisterEnum("im_home_proto.MessageStatus_Enum", MessageStatus_Enum_name, MessageStatus_Enum_value)
	proto.RegisterType((*MessageFileRecap)(nil), "im_home_proto.MessageFileRecap")
	proto.RegisterType((*ChatMessage)(nil), "im_home_proto.ChatMessage")
	proto.RegisterType((*ChatSingleReq)(nil), "im_home_proto.ChatSingleReq")
	proto.RegisterType((*ChatSingleRes)(nil), "im_home_proto.ChatSingleRes")
}

func init() { proto.RegisterFile("home_chat.proto", fileDescriptor_75856de7ef776b75) }

var fileDescriptor_75856de7ef776b75 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcf, 0x6e, 0xda, 0x40,
	0x10, 0xc6, 0x59, 0x9c, 0xd0, 0x64, 0x08, 0x60, 0xad, 0x7a, 0xb0, 0x50, 0xe4, 0xba, 0xb4, 0x07,
	0x14, 0x29, 0x20, 0xd1, 0x07, 0xa8, 0x9a, 0x92, 0x56, 0x56, 0x45, 0x0f, 0x6b, 0x4e, 0x55, 0x25,
	0xba, 0x31, 0x13, 0x58, 0x29, 0x6b, 0x53, 0x7b, 0x41, 0xb4, 0x4f, 0xd1, 0xb7, 0xe9, 0x2b, 0xf4,
	0x98, 0x63, 0x8f, 0x15, 0x3c, 0x45, 0x6f, 0xd5, 0x6e, 0xcc, 0x1f, 0x03, 0x3d, 0xe4, 0xb4, 0x3b,
	0xbf, 0x99, 0xf9, 0x76, 0xe7, 0x1b, 0xa8, 0x8d, 0x63, 0x89, 0x83, 0x70, 0xcc, 0x55, 0x6b, 0x92,
	0xc4, 0x2a, 0xa6, 0x15, 0x21, 0x07, 0x86, 0x99, 0xb0, 0xf1, 0x97, 0x80, 0xdd, 0xc3, 0x34, 0xe5,
	0x23, 0x7c, 0x27, 0xee, 0x90, 0x61, 0xc8, 0x27, 0xb4, 0x0e, 0x27, 0x3a, 0xf8, 0xc8, 0x25, 0x3a,
	0xc4, 0x23, 0xcd, 0x53, 0xb6, 0x8e, 0xe9, 0x4b, 0xa8, 0xe8, 0xfb, 0xf5, 0x5c, 0x61, 0x94, 0x8a,
	0x38, 0x72, 0x8a, 0xa6, 0x20, 0x0f, 0x57, 0x0a, 0x81, 0xf8, 0x8e, 0x8e, 0xe5, 0x91, 0xa6, 0xc5,
	0xd6, 0xf1, 0x2a, 0xd7, 0xe5, 0x8a, 0x3b, 0x47, 0x1b, 0x75, 0x1d, 0xd3, 0x73, 0x38, 0xd5, 0x77,
	0x3f, 0x1a, 0xe2, 0xdc, 0x39, 0xf6, 0x48, 0xf3, 0x98, 0x6d, 0x00, 0xed, 0x41, 0x6d, 0xeb, 0xaf,
	0xfd, 0x6f, 0x13, 0x74, 0x4a, 0x1e, 0x69, 0x56, 0x3b, 0x2f, 0x5a, 0xb9, 0xa9, 0x5a, 0x3b, 0x55,
	0x83, 0xeb, 0x68, 0x2a, 0xd9, 0x6e, 0x6f, 0xe3, 0x67, 0x11, 0xca, 0x6f, 0xc7, 0x5c, 0x65, 0x5c,
	0x7f, 0x2c, 0xc0, 0x68, 0x88, 0x89, 0xdf, 0x35, 0x63, 0x5b, 0x6c, 0x1d, 0x53, 0x17, 0x80, 0x61,
	0x88, 0x62, 0x66, 0xb2, 0x45, 0x93, 0xdd, 0x22, 0xfa, 0xe3, 0x99, 0x8c, 0xdf, 0xcd, 0x26, 0xde,
	0x00, 0x6d, 0x9a, 0x56, 0xea, 0x0b, 0x89, 0x81, 0xe2, 0x72, 0x62, 0xe6, 0xb6, 0x58, 0x1e, 0xd2,
	0xf7, 0x50, 0xc9, 0x5a, 0x02, 0xc5, 0xd5, 0x34, 0x35, 0x06, 0x54, 0x3b, 0xcf, 0x0f, 0x0f, 0xf7,
	0x50, 0xf3, 0x30, 0x5a, 0xbe, 0x8f, 0x7e, 0xc8, 0xed, 0xd4, 0x8f, 0x6e, 0xe3, 0xd4, 0x29, 0x79,
	0x56, 0xb3, 0xdc, 0x79, 0xf6, 0x7f, 0xa3, 0xcc, 0xea, 0xd9, 0x5e, 0x23, 0xa5, 0x70, 0x64, 0x56,
	0xf5, 0xc4, 0xac, 0xca, 0xdc, 0x1b, 0xaf, 0xa1, 0xa2, 0x8d, 0x0b, 0x44, 0x34, 0xd2, 0x8d, 0x5f,
	0x69, 0x2b, 0x2b, 0xd2, 0xb6, 0x95, 0x3b, 0xf5, 0x9d, 0x57, 0xb6, 0x4c, 0x3e, 0x2c, 0x90, 0x3e,
	0x56, 0xe0, 0x42, 0xc2, 0xd3, 0x43, 0x4b, 0xa6, 0x1e, 0x9c, 0x1f, 0xe2, 0x83, 0x2e, 0xde, 0xf2,
	0xe9, 0x9d, 0xb2, 0x0b, 0xd4, 0x86, 0x33, 0x4d, 0xfa, 0x38, 0x57, 0x3a, 0x6d, 0x13, 0x5a, 0x83,
	0xb2, 0x26, 0xbe, 0x1c, 0x19, 0x50, 0x5c, 0x95, 0xac, 0x14, 0x6c, 0xeb, 0xe2, 0x0b, 0xd0, 0x7d,
	0xdb, 0xa9, 0x0b, 0xf5, 0x7d, 0xba, 0xf5, 0xd4, 0x19, 0x9c, 0x68, 0xa2, 0xb7, 0x6c, 0x13, 0x5a,
	0x05, 0xd0, 0xd1, 0x9b, 0x24, 0x11, 0x33, 0xfd, 0x4a, 0x96, 0x65, 0xc8, 0x87, 0xb6, 0x75, 0xf5,
	0xf9, 0xd7, 0xc2, 0x25, 0xf7, 0x0b, 0x97, 0xfc, 0x59, 0xb8, 0xe4, 0xc7, 0xd2, 0x2d, 0xdc, 0x2f,
	0xdd, 0xc2, 0xef, 0xa5, 0x5b, 0xf8, 0x74, 0x35, 0x12, 0x6a, 0x3c, 0xbd, 0x69, 0x85, 0xb1, 0x6c,
	0x4b, 0x21, 0x45, 0x7a, 0x99, 0xb6, 0xfd, 0xde, 0x65, 0x80, 0xc9, 0x4c, 0x84, 0xd8, 0x4e, 0x93,
	0xb0, 0x1d, 0xc6, 0x52, 0xc6, 0x51, 0x76, 0x18, 0xcb, 0xda, 0x39, 0x03, 0x6f, 0x4a, 0xe6, 0x78,
	0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xa8, 0x4f, 0x78, 0x0f, 0x04, 0x00, 0x00,
}

func (m *MessageFileRecap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageFileRecap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageFileRecap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageFileType != 0 {
		i = encodeVarintHomeChat(dAtA, i, uint64(m.MessageFileType))
		i--
		dAtA[i] = 0x30
	}
	if m.FileIndex != 0 {
		i = encodeVarintHomeChat(dAtA, i, uint64(m.FileIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FileData) > 0 {
		i -= len(m.FileData)
		copy(dAtA[i:], m.FileData)
		i = encodeVarintHomeChat(dAtA, i, uint64(len(m.FileData)))
		i--
		dAtA[i] = 0x22
	}
	if m.FileSize != 0 {
		i = encodeVarintHomeChat(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FileExtension) > 0 {
		i -= len(m.FileExtension)
		copy(dAtA[i:], m.FileExtension)
		i = encodeVarintHomeChat(dAtA, i, uint64(len(m.FileExtension)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintHomeChat(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintHomeChat(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MessageFileInfos) > 0 {
		for iNdEx := len(m.MessageFileInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MessageFileInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHomeChat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MessageStatus != 0 {
		i = encodeVarintHomeChat(dAtA, i, uint64(m.MessageStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.SendTimeStamp != 0 {
		i = encodeVarintHomeChat(dAtA, i, uint64(m.SendTimeStamp))
		i--
		dAtA[i] = 0x20
	}
	if m.MessageID != 0 {
		i = encodeVarintHomeChat(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.ReceiverID != 0 {
		i = encodeVarintHomeChat(dAtA, i, uint64(m.ReceiverID))
		i--
		dAtA[i] = 0x10
	}
	if m.SenderID != 0 {
		i = encodeVarintHomeChat(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatSingleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatSingleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatSingleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHomeChat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatSingleRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatSingleRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatSingleRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHomeChat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHomeChat(dAtA []byte, offset int, v uint64) int {
	offset -= sovHomeChat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageFileRecap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovHomeChat(uint64(l))
	}
	l = len(m.FileExtension)
	if l > 0 {
		n += 1 + l + sovHomeChat(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovHomeChat(uint64(m.FileSize))
	}
	l = len(m.FileData)
	if l > 0 {
		n += 1 + l + sovHomeChat(uint64(l))
	}
	if m.FileIndex != 0 {
		n += 1 + sovHomeChat(uint64(m.FileIndex))
	}
	if m.MessageFileType != 0 {
		n += 1 + sovHomeChat(uint64(m.MessageFileType))
	}
	return n
}

func (m *ChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovHomeChat(uint64(m.SenderID))
	}
	if m.ReceiverID != 0 {
		n += 1 + sovHomeChat(uint64(m.ReceiverID))
	}
	if m.MessageID != 0 {
		n += 1 + sovHomeChat(uint64(m.MessageID))
	}
	if m.SendTimeStamp != 0 {
		n += 1 + sovHomeChat(uint64(m.SendTimeStamp))
	}
	if m.MessageStatus != 0 {
		n += 1 + sovHomeChat(uint64(m.MessageStatus))
	}
	if len(m.MessageFileInfos) > 0 {
		for _, e := range m.MessageFileInfos {
			l = e.Size()
			n += 1 + l + sovHomeChat(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovHomeChat(uint64(l))
	}
	return n
}

func (m *ChatSingleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovHomeChat(uint64(l))
	}
	return n
}

func (m *ChatSingleRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovHomeChat(uint64(l))
	}
	return n
}

func sovHomeChat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHomeChat(x uint64) (n int) {
	return sovHomeChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageFileRecap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageFileRecap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageFileRecap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileExtension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileExtension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileIndex", wireType)
			}
			m.FileIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageFileType", wireType)
			}
			m.MessageFileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageFileType |= MessageFileType_Enum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHomeChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverID", wireType)
			}
			m.ReceiverID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTimeStamp", wireType)
			}
			m.SendTimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTimeStamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageStatus", wireType)
			}
			m.MessageStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageStatus |= MessageStatus_Enum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageFileInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageFileInfos = append(m.MessageFileInfos, &MessageFileRecap{})
			if err := m.MessageFileInfos[len(m.MessageFileInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatSingleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatSingleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatSingleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ChatMessage{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatSingleRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatSingleRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatSingleRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ChatMessage{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHomeChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHomeChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHomeChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHomeChat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHomeChat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHomeChat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHomeChat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHomeChat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHomeChat = fmt.Errorf("proto: unexpected end of group")
)
