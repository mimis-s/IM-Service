// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: home_friends.proto

package im_home_proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 好友信息状态
type FriendInfoStatus struct {
	Friend       *UserInfo `protobuf:"bytes,1,opt,name=Friend,proto3" json:"Friend,omitempty"`
	IsUpdateHead bool      `protobuf:"varint,2,opt,name=IsUpdateHead,proto3" json:"IsUpdateHead,omitempty"`
}

func (m *FriendInfoStatus) Reset()         { *m = FriendInfoStatus{} }
func (m *FriendInfoStatus) String() string { return proto.CompactTextString(m) }
func (*FriendInfoStatus) ProtoMessage()    {}
func (*FriendInfoStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_59b581ecf1919eda, []int{0}
}
func (m *FriendInfoStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendInfoStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendInfoStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendInfoStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendInfoStatus.Merge(m, src)
}
func (m *FriendInfoStatus) XXX_Size() int {
	return m.Size()
}
func (m *FriendInfoStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendInfoStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FriendInfoStatus proto.InternalMessageInfo

func (m *FriendInfoStatus) GetFriend() *UserInfo {
	if m != nil {
		return m.Friend
	}
	return nil
}

func (m *FriendInfoStatus) GetIsUpdateHead() bool {
	if m != nil {
		return m.IsUpdateHead
	}
	return false
}

// 下发好友列表状态
type FriendsStatusList struct {
	FriendsStatusList      []*FriendInfoStatus `protobuf:"bytes,1,rep,name=FriendsStatusList,proto3" json:"FriendsStatusList,omitempty"`
	SendFriendApplyList    []*FriendInfoStatus `protobuf:"bytes,2,rep,name=SendFriendApplyList,proto3" json:"SendFriendApplyList,omitempty"`
	ReceiveFriendApplyList []*FriendInfoStatus `protobuf:"bytes,3,rep,name=ReceiveFriendApplyList,proto3" json:"ReceiveFriendApplyList,omitempty"`
}

func (m *FriendsStatusList) Reset()         { *m = FriendsStatusList{} }
func (m *FriendsStatusList) String() string { return proto.CompactTextString(m) }
func (*FriendsStatusList) ProtoMessage()    {}
func (*FriendsStatusList) Descriptor() ([]byte, []int) {
	return fileDescriptor_59b581ecf1919eda, []int{1}
}
func (m *FriendsStatusList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendsStatusList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendsStatusList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendsStatusList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendsStatusList.Merge(m, src)
}
func (m *FriendsStatusList) XXX_Size() int {
	return m.Size()
}
func (m *FriendsStatusList) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendsStatusList.DiscardUnknown(m)
}

var xxx_messageInfo_FriendsStatusList proto.InternalMessageInfo

func (m *FriendsStatusList) GetFriendsStatusList() []*FriendInfoStatus {
	if m != nil {
		return m.FriendsStatusList
	}
	return nil
}

func (m *FriendsStatusList) GetSendFriendApplyList() []*FriendInfoStatus {
	if m != nil {
		return m.SendFriendApplyList
	}
	return nil
}

func (m *FriendsStatusList) GetReceiveFriendApplyList() []*FriendInfoStatus {
	if m != nil {
		return m.ReceiveFriendApplyList
	}
	return nil
}

// 添加好友
type ApplyFriendsReq struct {
	ApplyFriendsID int64 `protobuf:"varint,1,opt,name=ApplyFriendsID,proto3" json:"ApplyFriendsID,omitempty"`
}

func (m *ApplyFriendsReq) Reset()         { *m = ApplyFriendsReq{} }
func (m *ApplyFriendsReq) String() string { return proto.CompactTextString(m) }
func (*ApplyFriendsReq) ProtoMessage()    {}
func (*ApplyFriendsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_59b581ecf1919eda, []int{2}
}
func (m *ApplyFriendsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyFriendsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyFriendsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyFriendsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyFriendsReq.Merge(m, src)
}
func (m *ApplyFriendsReq) XXX_Size() int {
	return m.Size()
}
func (m *ApplyFriendsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyFriendsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyFriendsReq proto.InternalMessageInfo

func (m *ApplyFriendsReq) GetApplyFriendsID() int64 {
	if m != nil {
		return m.ApplyFriendsID
	}
	return 0
}

type ApplyFriendsRes struct {
	FriendInfo *UserInfo `protobuf:"bytes,1,opt,name=FriendInfo,proto3" json:"FriendInfo,omitempty"`
}

func (m *ApplyFriendsRes) Reset()         { *m = ApplyFriendsRes{} }
func (m *ApplyFriendsRes) String() string { return proto.CompactTextString(m) }
func (*ApplyFriendsRes) ProtoMessage()    {}
func (*ApplyFriendsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_59b581ecf1919eda, []int{3}
}
func (m *ApplyFriendsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyFriendsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyFriendsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyFriendsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyFriendsRes.Merge(m, src)
}
func (m *ApplyFriendsRes) XXX_Size() int {
	return m.Size()
}
func (m *ApplyFriendsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyFriendsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyFriendsRes proto.InternalMessageInfo

func (m *ApplyFriendsRes) GetFriendInfo() *UserInfo {
	if m != nil {
		return m.FriendInfo
	}
	return nil
}

// 同意好友申请
type AgreeFriendApplyReq struct {
	FriendsID int64 `protobuf:"varint,1,opt,name=FriendsID,proto3" json:"FriendsID,omitempty"`
}

func (m *AgreeFriendApplyReq) Reset()         { *m = AgreeFriendApplyReq{} }
func (m *AgreeFriendApplyReq) String() string { return proto.CompactTextString(m) }
func (*AgreeFriendApplyReq) ProtoMessage()    {}
func (*AgreeFriendApplyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_59b581ecf1919eda, []int{4}
}
func (m *AgreeFriendApplyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgreeFriendApplyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgreeFriendApplyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgreeFriendApplyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgreeFriendApplyReq.Merge(m, src)
}
func (m *AgreeFriendApplyReq) XXX_Size() int {
	return m.Size()
}
func (m *AgreeFriendApplyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AgreeFriendApplyReq.DiscardUnknown(m)
}

var xxx_messageInfo_AgreeFriendApplyReq proto.InternalMessageInfo

func (m *AgreeFriendApplyReq) GetFriendsID() int64 {
	if m != nil {
		return m.FriendsID
	}
	return 0
}

type AgreeFriendApplyRes struct {
	FriendsID int64 `protobuf:"varint,1,opt,name=FriendsID,proto3" json:"FriendsID,omitempty"`
}

func (m *AgreeFriendApplyRes) Reset()         { *m = AgreeFriendApplyRes{} }
func (m *AgreeFriendApplyRes) String() string { return proto.CompactTextString(m) }
func (*AgreeFriendApplyRes) ProtoMessage()    {}
func (*AgreeFriendApplyRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_59b581ecf1919eda, []int{5}
}
func (m *AgreeFriendApplyRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgreeFriendApplyRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgreeFriendApplyRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgreeFriendApplyRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgreeFriendApplyRes.Merge(m, src)
}
func (m *AgreeFriendApplyRes) XXX_Size() int {
	return m.Size()
}
func (m *AgreeFriendApplyRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AgreeFriendApplyRes.DiscardUnknown(m)
}

var xxx_messageInfo_AgreeFriendApplyRes proto.InternalMessageInfo

func (m *AgreeFriendApplyRes) GetFriendsID() int64 {
	if m != nil {
		return m.FriendsID
	}
	return 0
}

// 删除好友
type DelFriendsReq struct {
	FriendsID int64 `protobuf:"varint,1,opt,name=FriendsID,proto3" json:"FriendsID,omitempty"`
}

func (m *DelFriendsReq) Reset()         { *m = DelFriendsReq{} }
func (m *DelFriendsReq) String() string { return proto.CompactTextString(m) }
func (*DelFriendsReq) ProtoMessage()    {}
func (*DelFriendsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_59b581ecf1919eda, []int{6}
}
func (m *DelFriendsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelFriendsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelFriendsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelFriendsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelFriendsReq.Merge(m, src)
}
func (m *DelFriendsReq) XXX_Size() int {
	return m.Size()
}
func (m *DelFriendsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelFriendsReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelFriendsReq proto.InternalMessageInfo

func (m *DelFriendsReq) GetFriendsID() int64 {
	if m != nil {
		return m.FriendsID
	}
	return 0
}

type DelFriendsRes struct {
	FriendsID int64 `protobuf:"varint,1,opt,name=FriendsID,proto3" json:"FriendsID,omitempty"`
}

func (m *DelFriendsRes) Reset()         { *m = DelFriendsRes{} }
func (m *DelFriendsRes) String() string { return proto.CompactTextString(m) }
func (*DelFriendsRes) ProtoMessage()    {}
func (*DelFriendsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_59b581ecf1919eda, []int{7}
}
func (m *DelFriendsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelFriendsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelFriendsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelFriendsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelFriendsRes.Merge(m, src)
}
func (m *DelFriendsRes) XXX_Size() int {
	return m.Size()
}
func (m *DelFriendsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DelFriendsRes.DiscardUnknown(m)
}

var xxx_messageInfo_DelFriendsRes proto.InternalMessageInfo

func (m *DelFriendsRes) GetFriendsID() int64 {
	if m != nil {
		return m.FriendsID
	}
	return 0
}

func init() {
	proto.RegisterType((*FriendInfoStatus)(nil), "im_home_proto.FriendInfoStatus")
	proto.RegisterType((*FriendsStatusList)(nil), "im_home_proto.FriendsStatusList")
	proto.RegisterType((*ApplyFriendsReq)(nil), "im_home_proto.ApplyFriendsReq")
	proto.RegisterType((*ApplyFriendsRes)(nil), "im_home_proto.ApplyFriendsRes")
	proto.RegisterType((*AgreeFriendApplyReq)(nil), "im_home_proto.AgreeFriendApplyReq")
	proto.RegisterType((*AgreeFriendApplyRes)(nil), "im_home_proto.AgreeFriendApplyRes")
	proto.RegisterType((*DelFriendsReq)(nil), "im_home_proto.DelFriendsReq")
	proto.RegisterType((*DelFriendsRes)(nil), "im_home_proto.DelFriendsRes")
}

func init() { proto.RegisterFile("home_friends.proto", fileDescriptor_59b581ecf1919eda) }

var fileDescriptor_59b581ecf1919eda = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x4f, 0x6b, 0xfa, 0x40,
	0x10, 0x35, 0x0a, 0xf2, 0xfb, 0x8d, 0xb5, 0x7f, 0x56, 0x68, 0xa5, 0x94, 0x54, 0x72, 0x28, 0x5e,
	0x4c, 0x40, 0x0f, 0xa5, 0x47, 0x45, 0x4a, 0x53, 0xea, 0xa1, 0x11, 0x29, 0x94, 0x82, 0xc4, 0x64,
	0xd4, 0x05, 0x93, 0x4d, 0xb3, 0xab, 0xd0, 0x2f, 0x51, 0xfa, 0xb1, 0x7a, 0xf4, 0xd8, 0x63, 0xd1,
	0x2f, 0x52, 0xdc, 0x08, 0xc6, 0x90, 0xa2, 0x3d, 0x2d, 0xf3, 0xf6, 0xbd, 0x37, 0x6f, 0x66, 0x80,
	0x8c, 0x99, 0x87, 0xfd, 0x61, 0x48, 0xd1, 0x77, 0xb9, 0x1e, 0x84, 0x4c, 0x30, 0x52, 0xa4, 0x5e,
	0x5f, 0xc2, 0xb2, 0x3c, 0x8f, 0x28, 0xb6, 0xe3, 0xb0, 0xa9, 0x2f, 0x22, 0x8a, 0x36, 0x82, 0xe3,
	0x5b, 0xa9, 0x31, 0xfd, 0x21, 0xeb, 0x0a, 0x5b, 0x4c, 0x39, 0x31, 0x20, 0x1f, 0x61, 0x65, 0xa5,
	0xa2, 0x54, 0x0b, 0xf5, 0x33, 0x7d, 0xcb, 0x47, 0xef, 0x71, 0x0c, 0x57, 0x74, 0x6b, 0x4d, 0x23,
	0x1a, 0x1c, 0x98, 0xbc, 0x17, 0xb8, 0xb6, 0xc0, 0x3b, 0xb4, 0xdd, 0x72, 0xb6, 0xa2, 0x54, 0xff,
	0x59, 0x5b, 0x98, 0xf6, 0x9e, 0x85, 0x93, 0x88, 0xce, 0xa3, 0x36, 0x0f, 0x94, 0x0b, 0xd2, 0x49,
	0x01, 0xcb, 0x4a, 0x25, 0x57, 0x2d, 0xd4, 0x2f, 0x13, 0x5d, 0x93, 0x31, 0xad, 0x14, 0xbb, 0x47,
	0x28, 0x75, 0xd1, 0x77, 0xa3, 0x8f, 0x66, 0x10, 0x4c, 0xde, 0xa4, 0x61, 0x76, 0x3f, 0xc3, 0x34,
	0x2d, 0x79, 0x82, 0x53, 0x0b, 0x1d, 0xa4, 0x33, 0x4c, 0xba, 0xe6, 0xf6, 0x73, 0xfd, 0x45, 0xae,
	0xdd, 0xc0, 0x91, 0x2c, 0xd6, 0x53, 0x58, 0xf8, 0x4a, 0xae, 0xe0, 0x30, 0x0e, 0x99, 0x6d, 0x79,
	0x80, 0x9c, 0x95, 0x40, 0xb5, 0xfb, 0xa4, 0x94, 0x93, 0x6b, 0x80, 0x4d, 0xe7, 0x5d, 0x77, 0x8b,
	0x51, 0xb5, 0x06, 0x94, 0x9a, 0xa3, 0x10, 0xe3, 0xf1, 0x56, 0x51, 0x2e, 0xe0, 0x7f, 0x32, 0xc5,
	0x06, 0x48, 0x17, 0xf1, 0x1d, 0xa2, 0x1a, 0x14, 0xdb, 0x38, 0x89, 0x8d, 0xfb, 0x27, 0xfa, 0x0e,
	0xf7, 0xd6, 0xcb, 0xe7, 0x42, 0x55, 0xe6, 0x0b, 0x55, 0xf9, 0x5e, 0xa8, 0xca, 0xc7, 0x52, 0xcd,
	0xcc, 0x97, 0x6a, 0xe6, 0x6b, 0xa9, 0x66, 0x9e, 0x5b, 0x23, 0x2a, 0xc6, 0xd3, 0x81, 0xee, 0x30,
	0xcf, 0xf0, 0xa8, 0x47, 0x79, 0x8d, 0x1b, 0x66, 0xa7, 0xd6, 0xc5, 0x70, 0x46, 0x1d, 0x34, 0x78,
	0xe8, 0x18, 0x0e, 0xf3, 0x3c, 0xe6, 0xaf, 0x1f, 0xb9, 0x2c, 0x63, 0x6b, 0x75, 0x83, 0xbc, 0x7c,
	0x1a, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0x40, 0xd3, 0xcc, 0x66, 0x03, 0x00, 0x00,
}

func (m *FriendInfoStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendInfoStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendInfoStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsUpdateHead {
		i--
		if m.IsUpdateHead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Friend != nil {
		{
			size, err := m.Friend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHomeFriends(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendsStatusList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendsStatusList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendsStatusList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReceiveFriendApplyList) > 0 {
		for iNdEx := len(m.ReceiveFriendApplyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceiveFriendApplyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHomeFriends(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SendFriendApplyList) > 0 {
		for iNdEx := len(m.SendFriendApplyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SendFriendApplyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHomeFriends(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FriendsStatusList) > 0 {
		for iNdEx := len(m.FriendsStatusList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FriendsStatusList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHomeFriends(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplyFriendsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyFriendsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyFriendsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplyFriendsID != 0 {
		i = encodeVarintHomeFriends(dAtA, i, uint64(m.ApplyFriendsID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplyFriendsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyFriendsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyFriendsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendInfo != nil {
		{
			size, err := m.FriendInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHomeFriends(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgreeFriendApplyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgreeFriendApplyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgreeFriendApplyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendsID != 0 {
		i = encodeVarintHomeFriends(dAtA, i, uint64(m.FriendsID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AgreeFriendApplyRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgreeFriendApplyRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgreeFriendApplyRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendsID != 0 {
		i = encodeVarintHomeFriends(dAtA, i, uint64(m.FriendsID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelFriendsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelFriendsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelFriendsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendsID != 0 {
		i = encodeVarintHomeFriends(dAtA, i, uint64(m.FriendsID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelFriendsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelFriendsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelFriendsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendsID != 0 {
		i = encodeVarintHomeFriends(dAtA, i, uint64(m.FriendsID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHomeFriends(dAtA []byte, offset int, v uint64) int {
	offset -= sovHomeFriends(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FriendInfoStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Friend != nil {
		l = m.Friend.Size()
		n += 1 + l + sovHomeFriends(uint64(l))
	}
	if m.IsUpdateHead {
		n += 2
	}
	return n
}

func (m *FriendsStatusList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FriendsStatusList) > 0 {
		for _, e := range m.FriendsStatusList {
			l = e.Size()
			n += 1 + l + sovHomeFriends(uint64(l))
		}
	}
	if len(m.SendFriendApplyList) > 0 {
		for _, e := range m.SendFriendApplyList {
			l = e.Size()
			n += 1 + l + sovHomeFriends(uint64(l))
		}
	}
	if len(m.ReceiveFriendApplyList) > 0 {
		for _, e := range m.ReceiveFriendApplyList {
			l = e.Size()
			n += 1 + l + sovHomeFriends(uint64(l))
		}
	}
	return n
}

func (m *ApplyFriendsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplyFriendsID != 0 {
		n += 1 + sovHomeFriends(uint64(m.ApplyFriendsID))
	}
	return n
}

func (m *ApplyFriendsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendInfo != nil {
		l = m.FriendInfo.Size()
		n += 1 + l + sovHomeFriends(uint64(l))
	}
	return n
}

func (m *AgreeFriendApplyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendsID != 0 {
		n += 1 + sovHomeFriends(uint64(m.FriendsID))
	}
	return n
}

func (m *AgreeFriendApplyRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendsID != 0 {
		n += 1 + sovHomeFriends(uint64(m.FriendsID))
	}
	return n
}

func (m *DelFriendsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendsID != 0 {
		n += 1 + sovHomeFriends(uint64(m.FriendsID))
	}
	return n
}

func (m *DelFriendsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendsID != 0 {
		n += 1 + sovHomeFriends(uint64(m.FriendsID))
	}
	return n
}

func sovHomeFriends(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHomeFriends(x uint64) (n int) {
	return sovHomeFriends(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FriendInfoStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeFriends
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendInfoStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendInfoStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeFriends
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Friend == nil {
				m.Friend = &UserInfo{}
			}
			if err := m.Friend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUpdateHead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUpdateHead = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHomeFriends(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendsStatusList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeFriends
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendsStatusList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendsStatusList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendsStatusList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeFriends
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendsStatusList = append(m.FriendsStatusList, &FriendInfoStatus{})
			if err := m.FriendsStatusList[len(m.FriendsStatusList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendFriendApplyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeFriends
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendFriendApplyList = append(m.SendFriendApplyList, &FriendInfoStatus{})
			if err := m.SendFriendApplyList[len(m.SendFriendApplyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveFriendApplyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeFriends
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveFriendApplyList = append(m.ReceiveFriendApplyList, &FriendInfoStatus{})
			if err := m.ReceiveFriendApplyList[len(m.ReceiveFriendApplyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeFriends(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyFriendsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeFriends
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyFriendsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyFriendsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyFriendsID", wireType)
			}
			m.ApplyFriendsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyFriendsID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHomeFriends(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyFriendsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeFriends
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyFriendsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyFriendsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeFriends
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FriendInfo == nil {
				m.FriendInfo = &UserInfo{}
			}
			if err := m.FriendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeFriends(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgreeFriendApplyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeFriends
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgreeFriendApplyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgreeFriendApplyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendsID", wireType)
			}
			m.FriendsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendsID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHomeFriends(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgreeFriendApplyRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeFriends
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgreeFriendApplyRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgreeFriendApplyRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendsID", wireType)
			}
			m.FriendsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendsID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHomeFriends(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelFriendsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeFriends
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelFriendsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelFriendsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendsID", wireType)
			}
			m.FriendsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendsID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHomeFriends(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelFriendsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeFriends
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelFriendsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelFriendsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendsID", wireType)
			}
			m.FriendsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendsID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHomeFriends(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeFriends
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHomeFriends(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHomeFriends
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHomeFriends
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHomeFriends
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHomeFriends
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHomeFriends
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHomeFriends        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHomeFriends          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHomeFriends = fmt.Errorf("proto: unexpected end of group")
)
