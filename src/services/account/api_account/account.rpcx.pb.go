// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account.proto

package api_account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mimis-s/IM-Service/src/common/commonproto/im_error_proto"
	_ "github.com/mimis-s/IM-Service/src/common/commonproto/im_home_proto"
	math "math"
)

import (
	context "context"
	client "github.com/mimis-s/golang_tools/rpcx/client"
	service "github.com/mimis-s/golang_tools/rpcx/service"
	"sync"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

var serverName string = "account"

var callSingleMethodFunc func()

var AccountClientInstance AccountClientInterface
var AccountClientOnce = new(sync.Once)

func newAccountClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) AccountClientInterface {
	if !isLocal {
		c := client.New(serverName, etcdAddrs, timeout, etcdBasePath)
		return &AccountRpcxClient{
			c: c,
		}
	} else {
		return &AccountLocalClient{}
	}
}

func SingleNewAccountClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) {
	callSingleMethodFunc = func() {
		c := newAccountClient(etcdAddrs, timeout, etcdBasePath, isLocal)
		AccountClientInstance = c
	}
}

// 外部调用函数

func Login(ctx context.Context,
	in *LoginReq) (*LoginRes, error) {

	if callSingleMethodFunc != nil {
		AccountClientOnce.Do(callSingleMethodFunc)
	}

	out := new(LoginRes)
	out, err := AccountClientInstance.Login(ctx, in)
	return out, err
}

func Register(ctx context.Context,
	in *RegisterReq) (*RegisterRes, error) {

	if callSingleMethodFunc != nil {
		AccountClientOnce.Do(callSingleMethodFunc)
	}

	out := new(RegisterRes)
	out, err := AccountClientInstance.Register(ctx, in)
	return out, err
}

type AccountClientInterface interface {
	Login(context.Context, *LoginReq) (*LoginRes, error)
	Register(context.Context, *RegisterReq) (*RegisterRes, error)
}

// rpcx客户端
type AccountRpcxClient struct {
	c *client.ClientManager
}

func (c *AccountRpcxClient) Login(ctx context.Context,
	in *LoginReq) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.c.Call(ctx, "Login", in, out)
	return out, err
}

func (c *AccountRpcxClient) Register(ctx context.Context,
	in *RegisterReq) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := c.c.Call(ctx, "Register", in, out)
	return out, err
}

// 本地调用客户端
type AccountLocalClient struct {
}

func (c *AccountLocalClient) Login(ctx context.Context,
	in *LoginReq) (*LoginRes, error) {
	out := new(LoginRes)
	err := AccountServiceLocal.Login(ctx, in, out)
	return out, err
}

func (c *AccountLocalClient) Register(ctx context.Context,
	in *RegisterReq) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := AccountServiceLocal.Register(ctx, in, out)
	return out, err
}

type AccountServiceInterface interface {
	Login(context.Context, *LoginReq, *LoginRes) error
	Register(context.Context, *RegisterReq, *RegisterRes) error
}

var AccountServiceLocal AccountServiceInterface

func RegisterAccountService(s *service.ServerManage, hdlr AccountServiceInterface) error {
	return s.RegisterOneService(serverName, hdlr)
}

func NewAccountServiceAndRun(listenAddr, exposeAddr string, etcdAddrs []string, handler AccountServiceInterface, etcdBasePath string, isLocal bool) (*service.ServerManage, error) {
	if !isLocal {
		s, err := service.New(exposeAddr, etcdAddrs, etcdBasePath)
		if err != nil {
			return nil, err
		}

		err = RegisterAccountService(s, handler)
		if err != nil {
			return nil, err
		}

		go func() {
			err = s.Run(listenAddr)
			if err != nil {
				panic(fmt.Errorf("listen(%v) error(%v)", listenAddr, err))
			}
		}()
		return s, nil
	}

	// 本地调用的时候使用
	AccountServiceLocal = handler
	return nil, nil
}
