// Code generated by protoc-gen-joymicro. DO NOT EDIT.
// source: gateway.proto

package api_gateway

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	"encoding/json"
	client "joynova.com/joynova/joymicro/client"
	server "joynova.com/joynova/joymicro/service"
	"reflect"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

var serviceName = "gateway"

func GetServiceName() string {
	return serviceName
}

type GatewayServiceInterface interface {
	NotifyClient(context.Context, *NotifyClientReq) (*NotifyClientRes, error)
}

func NewGatewayService(etcdAddrs []string, timeout time.Duration, isPermanent, isLocal bool) GatewayServiceInterface {
	if !isLocal {
		c := client.New(serviceName, etcdAddrs, timeout, isPermanent)
		return &gatewayService{
			c: c,
		}
	} else {
		return &gatewayServiceLocal{}
	}
}

type gatewayService struct {
	c *client.Service
}

func (c *gatewayService) NotifyClient(ctx context.Context, in *NotifyClientReq) (*NotifyClientRes, error) {
	out := new(NotifyClientRes)
	var err error
	if ctx.Value("to_all_nodes").(bool) {
		err = c.c.CallAll(ctx, "NotifyClient", in, out)
	} else {
		err = c.c.Call(ctx, "NotifyClient", in, out)
	}
	return out, err
}

var gatewayHandlerLocal GatewayHandlerInterface

type gatewayServiceLocal struct {
}

func (c *gatewayServiceLocal) NotifyClient(ctx context.Context, in *NotifyClientReq) (*NotifyClientRes, error) {
	out := new(NotifyClientRes)
	err := gatewayHandlerLocal.NotifyClient(ctx, in, out)
	return out, err
}

type GatewayHandlerInterface interface {
	NotifyClient(context.Context, *NotifyClientReq, *NotifyClientRes) error
}

func RegisterGatewayHandler(s *server.ServicesManager, hdlr GatewayHandlerInterface) error {
	return s.RegisterOneService(serviceName, hdlr)
}

func NewGatewayHandlerAndRun(listenAddr, exposeAddr string, etcdAddrs []string, handler GatewayHandlerInterface, isLocal bool) (*server.ServicesManager, error) {
	if isLocal {
		gatewayHandlerLocal = handler
		return nil, nil
	} else {
		s, err := server.New(exposeAddr, etcdAddrs)
		if err != nil {
			return nil, err
		}

		err = RegisterGatewayHandler(s, handler)
		if err != nil {
			return nil, err
		}

		go func() {
			err = s.Run(listenAddr)
			if err != nil {
				panic(fmt.Errorf("listen(%v) error(%v)", listenAddr, err))
			}
		}()

		return s, nil
	}
}

//===============================================Json Handler for Test===============================================

func NewGatewayJsonTestService(etcdAddrs []string, timeout time.Duration, isPermanent bool) (reflect.Type, reflect.Value) {
	c := NewGatewayService(etcdAddrs, timeout, isPermanent, false)
	c1 := &GatewayJsonTestService{c: c}
	return reflect.TypeOf(c1), reflect.ValueOf(c1)
}

type GatewayJsonTestService struct {
	c GatewayServiceInterface
}

func (c *GatewayJsonTestService) NotifyClient(ctx context.Context, in string) (*NotifyClientRes, error) {
	newIn := &NotifyClientReq{}
	err := json.Unmarshal([]byte(in), newIn)
	if err != nil {
		return nil, err
	}

	return c.c.NotifyClient(ctx, newIn)
}
