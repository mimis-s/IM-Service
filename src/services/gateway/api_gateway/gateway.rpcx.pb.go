// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway.proto

package api_gateway

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mimis-s/IM-Service/src/common/commonproto/im_error_proto"
	math "math"
)

import (
	context "context"
	client "github.com/mimis-s/golang_tools/rpcx/client"
	service "github.com/mimis-s/golang_tools/rpcx/service"
	"sync"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

var serverName string = "gateway"

var callSingleMethodFunc func()

var GatewayClientInstance GatewayClientInterface
var GatewayClientOnce = new(sync.Once)

func newGatewayClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) GatewayClientInterface {
	if !isLocal {
		c := client.New(serverName, etcdAddrs, timeout, etcdBasePath)
		return &GatewayRpcxClient{
			c: c,
		}
	} else {
		return &GatewayLocalClient{}
	}
}

func SingleNewGatewayClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) {
	callSingleMethodFunc = func() {
		c := newGatewayClient(etcdAddrs, timeout, etcdBasePath, isLocal)
		GatewayClientInstance = c
	}
}

// 外部调用函数

func GetClientConnType(ctx context.Context,
	in *GetClientConnTypeReq) (*GetClientConnTypeRes, error) {

	if callSingleMethodFunc != nil {
		GatewayClientOnce.Do(callSingleMethodFunc)
	}

	out := new(GetClientConnTypeRes)
	out, err := GatewayClientInstance.GetClientConnType(ctx, in)
	return out, err
}

func NotifyClient(ctx context.Context,
	in *NotifyClientReq) (*NotifyClientRes, error) {

	if callSingleMethodFunc != nil {
		GatewayClientOnce.Do(callSingleMethodFunc)
	}

	out := new(NotifyClientRes)
	out, err := GatewayClientInstance.NotifyClient(ctx, in)
	return out, err
}

func SendToClient(ctx context.Context,
	in *SendToClientReq) (*SendToClientRes, error) {

	if callSingleMethodFunc != nil {
		GatewayClientOnce.Do(callSingleMethodFunc)
	}

	out := new(SendToClientRes)
	out, err := GatewayClientInstance.SendToClient(ctx, in)
	return out, err
}

type GatewayClientInterface interface {
	GetClientConnType(context.Context, *GetClientConnTypeReq) (*GetClientConnTypeRes, error)
	NotifyClient(context.Context, *NotifyClientReq) (*NotifyClientRes, error)
	SendToClient(context.Context, *SendToClientReq) (*SendToClientRes, error)
}

// rpcx客户端
type GatewayRpcxClient struct {
	c *client.ClientManager
}

func (c *GatewayRpcxClient) GetClientConnType(ctx context.Context,
	in *GetClientConnTypeReq) (*GetClientConnTypeRes, error) {
	out := new(GetClientConnTypeRes)
	err := c.c.Call(ctx, "GetClientConnType", in, out)
	return out, err
}

func (c *GatewayRpcxClient) NotifyClient(ctx context.Context,
	in *NotifyClientReq) (*NotifyClientRes, error) {
	out := new(NotifyClientRes)
	err := c.c.Call(ctx, "NotifyClient", in, out)
	return out, err
}

func (c *GatewayRpcxClient) SendToClient(ctx context.Context,
	in *SendToClientReq) (*SendToClientRes, error) {
	out := new(SendToClientRes)
	err := c.c.Call(ctx, "SendToClient", in, out)
	return out, err
}

// 本地调用客户端
type GatewayLocalClient struct {
}

func (c *GatewayLocalClient) GetClientConnType(ctx context.Context,
	in *GetClientConnTypeReq) (*GetClientConnTypeRes, error) {
	out := new(GetClientConnTypeRes)
	err := GatewayServiceLocal.GetClientConnType(ctx, in, out)
	return out, err
}

func (c *GatewayLocalClient) NotifyClient(ctx context.Context,
	in *NotifyClientReq) (*NotifyClientRes, error) {
	out := new(NotifyClientRes)
	err := GatewayServiceLocal.NotifyClient(ctx, in, out)
	return out, err
}

func (c *GatewayLocalClient) SendToClient(ctx context.Context,
	in *SendToClientReq) (*SendToClientRes, error) {
	out := new(SendToClientRes)
	err := GatewayServiceLocal.SendToClient(ctx, in, out)
	return out, err
}

type GatewayServiceInterface interface {
	GetClientConnType(context.Context, *GetClientConnTypeReq, *GetClientConnTypeRes) error
	NotifyClient(context.Context, *NotifyClientReq, *NotifyClientRes) error
	SendToClient(context.Context, *SendToClientReq, *SendToClientRes) error
}

var GatewayServiceLocal GatewayServiceInterface

func RegisterGatewayService(s *service.ServerManage, hdlr GatewayServiceInterface) error {
	// 本地调用的时候使用(rpc本地客户端对应调用本地服务器)
	GatewayServiceLocal = hdlr
	return s.RegisterOneService(serverName, hdlr)
}

func NewGatewayServiceAndRun(listenAddr, exposeAddr string, etcdAddrs []string, handler GatewayServiceInterface, etcdBasePath string, isLocal bool) (*service.ServerManage, error) {
	if !isLocal {
		s, err := service.New(exposeAddr, etcdAddrs, etcdBasePath, listenAddr)
		if err != nil {
			return nil, err
		}

		err = RegisterGatewayService(s, handler)
		if err != nil {
			return nil, err
		}

		return s, nil
	}

	// 本地调用的时候使用
	GatewayServiceLocal = handler
	return nil, nil
}
