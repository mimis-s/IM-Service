// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package api_message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mimis-s/IM-Service/src/common/commonproto/im_error_proto"
	_ "github.com/mimis-s/IM-Service/src/common/commonproto/im_home_proto"
	math "math"
)

import (
	context "context"
	client "github.com/mimis-s/golang_tools/rpcx/client"
	service "github.com/mimis-s/golang_tools/rpcx/service"
	"sync"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

var serverName string = "message"

var callSingleMethodFunc func()

var MessageClientInstance MessageClientInterface
var MessageClientOnce = new(sync.Once)

func newMessageClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) MessageClientInterface {
	if !isLocal {
		c := client.New(serverName, etcdAddrs, timeout, etcdBasePath)
		return &MessageRpcxClient{
			c: c,
		}
	} else {
		return &MessageLocalClient{}
	}
}

func SingleNewMessageClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) {
	callSingleMethodFunc = func() {
		c := newMessageClient(etcdAddrs, timeout, etcdBasePath, isLocal)
		MessageClientInstance = c
	}
}

// 外部调用函数

func SaveOffLineMessage(ctx context.Context,
	in *SaveOffLineMessageReq) (*SaveOffLineMessageRes, error) {

	if callSingleMethodFunc != nil {
		MessageClientOnce.Do(callSingleMethodFunc)
	}

	out := new(SaveOffLineMessageRes)
	out, err := MessageClientInstance.SaveOffLineMessage(ctx, in)
	return out, err
}

type MessageClientInterface interface {
	SaveOffLineMessage(context.Context, *SaveOffLineMessageReq) (*SaveOffLineMessageRes, error)
}

// rpcx客户端
type MessageRpcxClient struct {
	c *client.ClientManager
}

func (c *MessageRpcxClient) SaveOffLineMessage(ctx context.Context,
	in *SaveOffLineMessageReq) (*SaveOffLineMessageRes, error) {
	out := new(SaveOffLineMessageRes)
	err := c.c.Call(ctx, "SaveOffLineMessage", in, out)
	return out, err
}

// 本地调用客户端
type MessageLocalClient struct {
}

func (c *MessageLocalClient) SaveOffLineMessage(ctx context.Context,
	in *SaveOffLineMessageReq) (*SaveOffLineMessageRes, error) {
	out := new(SaveOffLineMessageRes)
	err := MessageServiceLocal.SaveOffLineMessage(ctx, in, out)
	return out, err
}

type MessageServiceInterface interface {
	SaveOffLineMessage(context.Context, *SaveOffLineMessageReq, *SaveOffLineMessageRes) error
}

var MessageServiceLocal MessageServiceInterface

func RegisterMessageService(s *service.ServerManage, hdlr MessageServiceInterface) error {
	return s.RegisterOneService(serverName, hdlr)
}

func NewMessageServiceAndRun(listenAddr, exposeAddr string, etcdAddrs []string, handler MessageServiceInterface, etcdBasePath string, isLocal bool) (*service.ServerManage, error) {
	if !isLocal {
		s, err := service.New(exposeAddr, etcdAddrs, etcdBasePath)
		if err != nil {
			return nil, err
		}

		err = RegisterMessageService(s, handler)
		if err != nil {
			return nil, err
		}

		go func() {
			err = s.Run(listenAddr)
			if err != nil {
				panic(fmt.Errorf("listen(%v) error(%v)", listenAddr, err))
			}
		}()
		return s, nil
	}

	// 本地调用的时候使用
	MessageServiceLocal = handler
	return nil, nil
}
