// Code generated by protoc-gen-go. DO NOT EDIT.
// source: overrall.proto

package api_overrall

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mimis-s/IM-Service/src/common/commonproto/im_error_proto"
	math "math"
)

import (
	context "context"
	client "github.com/mimis-s/golang_tools/rpcx/client"
	service "github.com/mimis-s/golang_tools/rpcx/service"
	"sync"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

var serverName string = "overrall"

var callSingleMethodFunc func()

var OverrallClientInstance OverrallClientInterface
var OverrallClientOnce = new(sync.Once)

func newOverrallClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) OverrallClientInterface {
	if !isLocal {
		c := client.New(serverName, etcdAddrs, timeout, etcdBasePath)
		return &OverrallRpcxClient{
			c: c,
		}
	} else {
		return &OverrallLocalClient{}
	}
}

func SingleNewOverrallClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) {
	callSingleMethodFunc = func() {
		c := newOverrallClient(etcdAddrs, timeout, etcdBasePath, isLocal)
		OverrallClientInstance = c
	}
}

// 外部调用函数

func GenerateUniqueUserID(ctx context.Context,
	in *GenerateUniqueUserIDReq) (*GenerateUniqueUserIDRes, error) {

	if callSingleMethodFunc != nil {
		OverrallClientOnce.Do(callSingleMethodFunc)
	}

	out := new(GenerateUniqueUserIDRes)
	out, err := OverrallClientInstance.GenerateUniqueUserID(ctx, in)
	return out, err
}

type OverrallClientInterface interface {
	GenerateUniqueUserID(context.Context, *GenerateUniqueUserIDReq) (*GenerateUniqueUserIDRes, error)
}

// rpcx客户端
type OverrallRpcxClient struct {
	c *client.ClientManager
}

func (c *OverrallRpcxClient) GenerateUniqueUserID(ctx context.Context,
	in *GenerateUniqueUserIDReq) (*GenerateUniqueUserIDRes, error) {
	out := new(GenerateUniqueUserIDRes)
	err := c.c.Call(ctx, "GenerateUniqueUserID", in, out)
	return out, err
}

// 本地调用客户端
type OverrallLocalClient struct {
}

func (c *OverrallLocalClient) GenerateUniqueUserID(ctx context.Context,
	in *GenerateUniqueUserIDReq) (*GenerateUniqueUserIDRes, error) {
	out := new(GenerateUniqueUserIDRes)
	err := OverrallServiceLocal.GenerateUniqueUserID(ctx, in, out)
	return out, err
}

type OverrallServiceInterface interface {
	GenerateUniqueUserID(context.Context, *GenerateUniqueUserIDReq, *GenerateUniqueUserIDRes) error
}

var OverrallServiceLocal OverrallServiceInterface

func RegisterOverrallService(s *service.ServerManage, hdlr OverrallServiceInterface) error {
	// 本地调用的时候使用(rpc本地客户端对应调用本地服务器)
	OverrallServiceLocal = hdlr
	return s.RegisterOneService(serverName, hdlr)
}

func NewOverrallServiceAndRun(listenAddr, exposeAddr string, etcdAddrs []string, handler OverrallServiceInterface, etcdBasePath string, isLocal bool) (*service.ServerManage, error) {
	if !isLocal {
		s, err := service.New(exposeAddr, etcdAddrs, etcdBasePath, listenAddr)
		if err != nil {
			return nil, err
		}

		err = RegisterOverrallService(s, handler)
		if err != nil {
			return nil, err
		}

		return s, nil
	}

	// 本地调用的时候使用
	OverrallServiceLocal = handler
	return nil, nil
}
