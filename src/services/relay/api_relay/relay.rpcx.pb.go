// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay.proto

package api_relay

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/mimis-s/golang_tools/rpcx/client"
	service "github.com/mimis-s/golang_tools/rpcx/service"
	"sync"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

var serverName string = "relay"

var callSingleMethodFunc func()

var RelayClientInstance RelayClientInterface
var RelayClientOnce = new(sync.Once)

func newRelayClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) RelayClientInterface {
	if !isLocal {
		c := client.New(serverName, etcdAddrs, timeout, etcdBasePath)
		return &RelayRpcxClient{
			c: c,
		}
	} else {
		return &RelayLocalClient{}
	}
}

func SingleNewRelayClient(etcdAddrs []string, timeout time.Duration, etcdBasePath string, isLocal bool) {
	callSingleMethodFunc = func() {
		c := newRelayClient(etcdAddrs, timeout, etcdBasePath, isLocal)
		RelayClientInstance = c
	}
}

// 外部调用函数

type RelayClientInterface interface {
}

// rpcx客户端
type RelayRpcxClient struct {
	c *client.ClientManager
}

// 本地调用客户端
type RelayLocalClient struct {
}

type RelayServiceInterface interface {
}

var RelayServiceLocal RelayServiceInterface

func RegisterRelayService(s *service.ServerManage, hdlr RelayServiceInterface) error {
	return s.RegisterOneService(serverName, hdlr)
}

func NewRelayServiceAndRun(listenAddr, exposeAddr string, etcdAddrs []string, handler RelayServiceInterface, etcdBasePath string, isLocal bool) (*service.ServerManage, error) {
	if !isLocal {
		s, err := service.New(exposeAddr, etcdAddrs, etcdBasePath)
		if err != nil {
			return nil, err
		}

		err = RegisterRelayService(s, handler)
		if err != nil {
			return nil, err
		}

		go func() {
			err = s.Run(listenAddr)
			if err != nil {
				panic(fmt.Errorf("listen(%v) error(%v)", listenAddr, err))
			}
		}()
		return s, nil
	}

	// 本地调用的时候使用
	RelayServiceLocal = handler
	return nil, nil
}
