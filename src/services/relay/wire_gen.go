// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package relay

import (
	"github.com/mimis-s/IM-Service/src/common/registry"
	"github.com/mimis-s/IM-Service/src/services/relay/job"
	"github.com/mimis-s/IM-Service/src/services/relay/service"
	"github.com/mimis-s/golang_tools/app"
	service2 "github.com/mimis-s/golang_tools/rpcx/service"
)

// Injectors from wire.go:

func appInject(a *app.App) (interface{}, error) {
	serverManage, err := registry.NewRpcService()
	if err != nil {
		return nil, err
	}
	serviceService, err := service.NewServiceHandler(serverManage)
	if err != nil {
		return nil, err
	}
	jobJob := job.InitMQ(serviceService)
	v, err := registerHandler(serverManage, serviceService, jobJob, a)
	if err != nil {
		return nil, err
	}
	return v, nil
}

// wire.go:

func registerHandler(sm *service2.ServerManage, svcHandler *service.Service, _ *job.Job, a *app.App) (interface{}, error) {

	return nil, nil
}

func createAppInfo() (*app.AppOutSideInfo, error) {
	var err error
	appInfo := app.NewAppOutSide("relay",
		func(a *app.App) error {
			_, err = appInject(a)
			return err

		},
	)

	return appInfo, err
}

func CreateAppInfo() (*app.AppOutSideInfo, error) {
	appInfo, err := createAppInfo()
	if err != nil {
		panic(err)
	}
	return appInfo, err
}
